#!/usr/bin/env python
import roslib
roslib.load_manifest('localizer')
import rospy
import sys, select, termios, tty
from std_msgs.msg import String, Bool, ColorRGBA
import sensor_msgs.msg
import message_filters
import collections
from detection_msgs.msg import Detection
from localizer.srv import Localize
from sensor_msgs.msg import CameraInfo
from visualization_msgs.msg import Marker, MarkerArray
from image_geometry import PinholeCameraModel
from geometry_msgs.msg import Point, Vector3, PointStamped
import tf

class DetectionMapper():

	def camera_callback(self, camera_info):
		self.camera_infos.append(camera_info)

	def detections_callback(self, detection):

		u = detection.x + detection.width / 2
		v = detection.y + detection.height / 2

		camera_info = None
		best_time = 100
		for ci in self.camera_infos:
			time = abs(ci.header.stamp.to_sec() - detection.header.stamp.to_sec())
			if time < best_time:
				camera_info = ci
				best_time = time

		if not camera_info or best_time > 1:
			return

		camera_model = PinholeCameraModel()
		camera_model.fromCameraInfo(camera_info)

		point = Point(((u - camera_model.cx()) - camera_model.Tx()) / camera_model.fx(),
				((v - camera_model.cy()) - camera_model.Ty()) / camera_model.fy(), 1)
		localization = self.localize(detection.header, point, self.region_scope)
		
		print "Tocka pred transformacijo v /map: (",localization.pose.position.x," , ",localization.pose.position.y," , ",localization.pose.position.z,")"
		
		try:
			#(trans, rot) = self.listener.lookupTransform('map', detection.header.frame_id, rospy.Time(0))
			#(trans, rot) = self.listener.lookupTransform('/map', detection.header.frame_id, detection.header.stamp)
			#(trans, rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time(0))
			point_bf = Point(localization.pose.position.x,localization.pose.position.y,localization.pose.position.z)
			ps_bf = PointStamped()
			ps_bf.point = point_bf
			ps_bf.header = detection.header
			ps_af = self.listener.transformPoint("/map",ps_bf)
			print "Transformirana tocka: (",ps_af.point.x," , ",ps_af.point.y," , ",ps_af.point.z,")"
			#print "header.frame.id: ",detection.header.frame_id 
			#print "***TRANS: ",trans
			#print "***ROT: ",rot
		except:
			print "Neuspesna transformacija"
			return

		if not localization:
			return

		marker = Marker()
		#marker.header.stamp = detection.header.stamp
		marker.header.stamp = rospy.Time.now()
		#marker.header.frame_id = detection.header.frame_id
		marker.header.frame_id = "/map"
		#marker.pose = localization.pose
		#marker.pose.position = Point(trans[0],trans[1],trans[2])
		marker.pose.position = ps_af.point
		#marker.pose.orientation = Quaternion(rot)
		#marker.pose.orientation.x = rot[0]
		#marker.pose.orientation.y = rot[1]
		#marker.pose.orientation.z = rot[2]
		#marker.pose.orientation.w = rot[3]
		marker.type = Marker.CUBE
		marker.action = Marker.ADD
		marker.frame_locked = False
		marker.lifetime = rospy.Duration.from_sec(1)
		marker.id = self.marker_id_counter
		marker.scale = Vector3(0.1, 0.1, 0.1)
		marker.color = ColorRGBA(1, 0, 0, 1)
		self.markers.markers.append(marker)
		self.marker_id_counter += 1

	def flush(self):
		if not self.markers.markers:
			self.markers = MarkerArray()
			return
		self.markers_pub.publish(self.markers)
		#self.markers = MarkerArray()

	def __init__(self):
		self.markers = MarkerArray()
		self.marker_id_counter = 0
		self.region_scope = rospy.get_param('~region', 3)
		self.buffer_size = rospy.get_param('~camera_buffer_size', 30)
		rospy.wait_for_service('localizer/localize')

		self.camera_infos = collections.deque(maxlen = self.buffer_size)
		self.detections_sub = message_filters.Subscriber('detections', Detection)
		self.detections_sub.registerCallback(self.detections_callback)

		self.camera_sub = message_filters.Subscriber('camera_info', CameraInfo)
		self.camera_sub.registerCallback(self.camera_callback)

		self.localize = rospy.ServiceProxy('localizer/localize', Localize)
		self.markers_pub = rospy.Publisher('markers', MarkerArray)
		self.listener = tf.TransformListener()

if __name__ == '__main__':
		rospy.init_node('mapper')

		try:
			mapper = DetectionMapper()
			r = rospy.Rate(30)
			while not rospy.is_shutdown():
				mapper.flush()
				r.sleep()
		except rospy.ROSInterruptException: pass

