#!/usr/bin/env python
import roslib
roslib.load_manifest('exercise4')
import rospy
import sensor_msgs.msg
import message_filters
import tf
from std_msgs.msg import String, Bool, ColorRGBA
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point, Vector3

# Node for face detection.
class Breadcrumbs():

	def push_position(self):

		try:
			(trans, rot) = self.listener.lookupTransform('/map', '/base_link', rospy.Time(0))

			self.trail.append(trans)

		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
			pass

		markers = MarkerArray()

		i = 0
		for point in self.trail:
				marker = Marker()
				marker.header.stamp = rospy.Time.now()
				marker.header.frame_id = '/map'
				marker.pose.position = Point(point[0], point[1], point[2])
				marker.type = Marker.CUBE
				marker.action = Marker.ADD
				marker.frame_locked = False
				marker.lifetime = rospy.Time(0)
				marker.id = i
				marker.scale = Vector3(0.1, 0.1, 0.1)
				marker.color = ColorRGBA(1, 1, 0, 1)
				markers.markers.append(marker)
				i = i + 1

		self.trail_pub.publish(markers)

		self.message_counter = self.message_counter + 1

	def __init__(self):
		self.rate = rospy.get_param('~rate', 1)

		markers_topic = rospy.get_param('~markers_topic', rospy.resolve_name('%s/trail' % rospy.get_name()))

		self.listener = tf.TransformListener()

		self.trail_pub = rospy.Publisher(markers_topic, MarkerArray, queue_size=5)
		self.trail = []

		self.message_counter = 0

if __name__ == '__main__':

		rospy.init_node('breadcrumbs')
		try:
			bc = Breadcrumbs()
			r = rospy.Rate(bc.rate)
			while not rospy.is_shutdown():
				bc.push_position()
				r.sleep()
		except rospy.ROSInterruptException: pass
